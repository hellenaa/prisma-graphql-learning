// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  about: (where?: AboutWhereInput) => Promise<boolean>;
  blogPost: (where?: BlogPostWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  homepageSlider: (where?: HomepageSliderWhereInput) => Promise<boolean>;
  partnerSlider: (where?: PartnerSliderWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  about: (where: AboutWhereUniqueInput) => AboutNullablePromise;
  abouts: (args?: {
    where?: AboutWhereInput;
    orderBy?: AboutOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<About>;
  aboutsConnection: (args?: {
    where?: AboutWhereInput;
    orderBy?: AboutOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AboutConnectionPromise;
  blogPost: (where: BlogPostWhereUniqueInput) => BlogPostNullablePromise;
  blogPosts: (args?: {
    where?: BlogPostWhereInput;
    orderBy?: BlogPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<BlogPost>;
  blogPostsConnection: (args?: {
    where?: BlogPostWhereInput;
    orderBy?: BlogPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BlogPostConnectionPromise;
  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  homepageSlider: (
    where: HomepageSliderWhereUniqueInput
  ) => HomepageSliderNullablePromise;
  homepageSliders: (args?: {
    where?: HomepageSliderWhereInput;
    orderBy?: HomepageSliderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<HomepageSlider>;
  homepageSlidersConnection: (args?: {
    where?: HomepageSliderWhereInput;
    orderBy?: HomepageSliderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HomepageSliderConnectionPromise;
  partnerSlider: (
    where: PartnerSliderWhereUniqueInput
  ) => PartnerSliderNullablePromise;
  partnerSliders: (args?: {
    where?: PartnerSliderWhereInput;
    orderBy?: PartnerSliderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PartnerSlider>;
  partnerSlidersConnection: (args?: {
    where?: PartnerSliderWhereInput;
    orderBy?: PartnerSliderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PartnerSliderConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAbout: (data: AboutCreateInput) => AboutPromise;
  updateAbout: (args: {
    data: AboutUpdateInput;
    where: AboutWhereUniqueInput;
  }) => AboutPromise;
  updateManyAbouts: (args: {
    data: AboutUpdateManyMutationInput;
    where?: AboutWhereInput;
  }) => BatchPayloadPromise;
  upsertAbout: (args: {
    where: AboutWhereUniqueInput;
    create: AboutCreateInput;
    update: AboutUpdateInput;
  }) => AboutPromise;
  deleteAbout: (where: AboutWhereUniqueInput) => AboutPromise;
  deleteManyAbouts: (where?: AboutWhereInput) => BatchPayloadPromise;
  createBlogPost: (data: BlogPostCreateInput) => BlogPostPromise;
  updateBlogPost: (args: {
    data: BlogPostUpdateInput;
    where: BlogPostWhereUniqueInput;
  }) => BlogPostPromise;
  updateManyBlogPosts: (args: {
    data: BlogPostUpdateManyMutationInput;
    where?: BlogPostWhereInput;
  }) => BatchPayloadPromise;
  upsertBlogPost: (args: {
    where: BlogPostWhereUniqueInput;
    create: BlogPostCreateInput;
    update: BlogPostUpdateInput;
  }) => BlogPostPromise;
  deleteBlogPost: (where: BlogPostWhereUniqueInput) => BlogPostPromise;
  deleteManyBlogPosts: (where?: BlogPostWhereInput) => BatchPayloadPromise;
  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createHomepageSlider: (
    data: HomepageSliderCreateInput
  ) => HomepageSliderPromise;
  updateHomepageSlider: (args: {
    data: HomepageSliderUpdateInput;
    where: HomepageSliderWhereUniqueInput;
  }) => HomepageSliderPromise;
  updateManyHomepageSliders: (args: {
    data: HomepageSliderUpdateManyMutationInput;
    where?: HomepageSliderWhereInput;
  }) => BatchPayloadPromise;
  upsertHomepageSlider: (args: {
    where: HomepageSliderWhereUniqueInput;
    create: HomepageSliderCreateInput;
    update: HomepageSliderUpdateInput;
  }) => HomepageSliderPromise;
  deleteHomepageSlider: (
    where: HomepageSliderWhereUniqueInput
  ) => HomepageSliderPromise;
  deleteManyHomepageSliders: (
    where?: HomepageSliderWhereInput
  ) => BatchPayloadPromise;
  createPartnerSlider: (data: PartnerSliderCreateInput) => PartnerSliderPromise;
  updatePartnerSlider: (args: {
    data: PartnerSliderUpdateInput;
    where: PartnerSliderWhereUniqueInput;
  }) => PartnerSliderPromise;
  updateManyPartnerSliders: (args: {
    data: PartnerSliderUpdateManyMutationInput;
    where?: PartnerSliderWhereInput;
  }) => BatchPayloadPromise;
  upsertPartnerSlider: (args: {
    where: PartnerSliderWhereUniqueInput;
    create: PartnerSliderCreateInput;
    update: PartnerSliderUpdateInput;
  }) => PartnerSliderPromise;
  deletePartnerSlider: (
    where: PartnerSliderWhereUniqueInput
  ) => PartnerSliderPromise;
  deleteManyPartnerSliders: (
    where?: PartnerSliderWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  about: (
    where?: AboutSubscriptionWhereInput
  ) => AboutSubscriptionPayloadSubscription;
  blogPost: (
    where?: BlogPostSubscriptionWhereInput
  ) => BlogPostSubscriptionPayloadSubscription;
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  homepageSlider: (
    where?: HomepageSliderSubscriptionWhereInput
  ) => HomepageSliderSubscriptionPayloadSubscription;
  partnerSlider: (
    where?: PartnerSliderSubscriptionWhereInput
  ) => PartnerSliderSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AboutOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "textArm_ASC"
  | "textArm_DESC"
  | "textEng_ASC"
  | "textEng_DESC"
  | "textRus_ASC"
  | "textRus_DESC";

export type BlogPostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "published_ASC"
  | "published_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "title_ASC"
  | "title_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "published_ASC"
  | "published_DESC";

export type HomepageSliderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "filepath_ASC"
  | "filepath_DESC"
  | "position_ASC"
  | "position_DESC";

export type PartnerSliderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "filepath_ASC"
  | "filepath_DESC"
  | "url_ASC"
  | "url_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC"
  | "username_ASC"
  | "username_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AboutWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
}>;

export interface AboutWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  textArm?: Maybe<String>;
  textArm_not?: Maybe<String>;
  textArm_in?: Maybe<String[] | String>;
  textArm_not_in?: Maybe<String[] | String>;
  textArm_lt?: Maybe<String>;
  textArm_lte?: Maybe<String>;
  textArm_gt?: Maybe<String>;
  textArm_gte?: Maybe<String>;
  textArm_contains?: Maybe<String>;
  textArm_not_contains?: Maybe<String>;
  textArm_starts_with?: Maybe<String>;
  textArm_not_starts_with?: Maybe<String>;
  textArm_ends_with?: Maybe<String>;
  textArm_not_ends_with?: Maybe<String>;
  textEng?: Maybe<String>;
  textEng_not?: Maybe<String>;
  textEng_in?: Maybe<String[] | String>;
  textEng_not_in?: Maybe<String[] | String>;
  textEng_lt?: Maybe<String>;
  textEng_lte?: Maybe<String>;
  textEng_gt?: Maybe<String>;
  textEng_gte?: Maybe<String>;
  textEng_contains?: Maybe<String>;
  textEng_not_contains?: Maybe<String>;
  textEng_starts_with?: Maybe<String>;
  textEng_not_starts_with?: Maybe<String>;
  textEng_ends_with?: Maybe<String>;
  textEng_not_ends_with?: Maybe<String>;
  textRus?: Maybe<String>;
  textRus_not?: Maybe<String>;
  textRus_in?: Maybe<String[] | String>;
  textRus_not_in?: Maybe<String[] | String>;
  textRus_lt?: Maybe<String>;
  textRus_lte?: Maybe<String>;
  textRus_gt?: Maybe<String>;
  textRus_gte?: Maybe<String>;
  textRus_contains?: Maybe<String>;
  textRus_not_contains?: Maybe<String>;
  textRus_starts_with?: Maybe<String>;
  textRus_not_starts_with?: Maybe<String>;
  textRus_ends_with?: Maybe<String>;
  textRus_not_ends_with?: Maybe<String>;
  AND?: Maybe<AboutWhereInput[] | AboutWhereInput>;
  OR?: Maybe<AboutWhereInput[] | AboutWhereInput>;
  NOT?: Maybe<AboutWhereInput[] | AboutWhereInput>;
}

export type BlogPostWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface BlogPostWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  author?: Maybe<UserWhereInput>;
  comment_every?: Maybe<CommentWhereInput>;
  comment_some?: Maybe<CommentWhereInput>;
  comment_none?: Maybe<CommentWhereInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  published?: Maybe<DateTimeInput>;
  published_not?: Maybe<DateTimeInput>;
  published_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  published_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  published_lt?: Maybe<DateTimeInput>;
  published_lte?: Maybe<DateTimeInput>;
  published_gt?: Maybe<DateTimeInput>;
  published_gte?: Maybe<DateTimeInput>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  AND?: Maybe<BlogPostWhereInput[] | BlogPostWhereInput>;
  OR?: Maybe<BlogPostWhereInput[] | BlogPostWhereInput>;
  NOT?: Maybe<BlogPostWhereInput[] | BlogPostWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  blogPost_every?: Maybe<BlogPostWhereInput>;
  blogPost_some?: Maybe<BlogPostWhereInput>;
  blogPost_none?: Maybe<BlogPostWhereInput>;
  comment_every?: Maybe<CommentWhereInput>;
  comment_some?: Maybe<CommentWhereInput>;
  comment_none?: Maybe<CommentWhereInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CommentWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  author?: Maybe<UserWhereInput>;
  blogPost?: Maybe<BlogPostWhereInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  published?: Maybe<DateTimeInput>;
  published_not?: Maybe<DateTimeInput>;
  published_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  published_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  published_lt?: Maybe<DateTimeInput>;
  published_lte?: Maybe<DateTimeInput>;
  published_gt?: Maybe<DateTimeInput>;
  published_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type HomepageSliderWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
  position?: Maybe<Int>;
}>;

export interface HomepageSliderWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  filepath?: Maybe<String>;
  filepath_not?: Maybe<String>;
  filepath_in?: Maybe<String[] | String>;
  filepath_not_in?: Maybe<String[] | String>;
  filepath_lt?: Maybe<String>;
  filepath_lte?: Maybe<String>;
  filepath_gt?: Maybe<String>;
  filepath_gte?: Maybe<String>;
  filepath_contains?: Maybe<String>;
  filepath_not_contains?: Maybe<String>;
  filepath_starts_with?: Maybe<String>;
  filepath_not_starts_with?: Maybe<String>;
  filepath_ends_with?: Maybe<String>;
  filepath_not_ends_with?: Maybe<String>;
  position?: Maybe<Int>;
  position_not?: Maybe<Int>;
  position_in?: Maybe<Int[] | Int>;
  position_not_in?: Maybe<Int[] | Int>;
  position_lt?: Maybe<Int>;
  position_lte?: Maybe<Int>;
  position_gt?: Maybe<Int>;
  position_gte?: Maybe<Int>;
  AND?: Maybe<HomepageSliderWhereInput[] | HomepageSliderWhereInput>;
  OR?: Maybe<HomepageSliderWhereInput[] | HomepageSliderWhereInput>;
  NOT?: Maybe<HomepageSliderWhereInput[] | HomepageSliderWhereInput>;
}

export type PartnerSliderWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
}>;

export interface PartnerSliderWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  filepath?: Maybe<String>;
  filepath_not?: Maybe<String>;
  filepath_in?: Maybe<String[] | String>;
  filepath_not_in?: Maybe<String[] | String>;
  filepath_lt?: Maybe<String>;
  filepath_lte?: Maybe<String>;
  filepath_gt?: Maybe<String>;
  filepath_gte?: Maybe<String>;
  filepath_contains?: Maybe<String>;
  filepath_not_contains?: Maybe<String>;
  filepath_starts_with?: Maybe<String>;
  filepath_not_starts_with?: Maybe<String>;
  filepath_ends_with?: Maybe<String>;
  filepath_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<PartnerSliderWhereInput[] | PartnerSliderWhereInput>;
  OR?: Maybe<PartnerSliderWhereInput[] | PartnerSliderWhereInput>;
  NOT?: Maybe<PartnerSliderWhereInput[] | PartnerSliderWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
  email?: Maybe<String>;
  username?: Maybe<String>;
}>;

export interface AboutCreateInput {
  id?: Maybe<UUID>;
  status?: Maybe<String>;
  textArm: String;
  textEng: String;
  textRus: String;
}

export interface AboutUpdateInput {
  status?: Maybe<String>;
  textArm?: Maybe<String>;
  textEng?: Maybe<String>;
  textRus?: Maybe<String>;
}

export interface AboutUpdateManyMutationInput {
  status?: Maybe<String>;
  textArm?: Maybe<String>;
  textEng?: Maybe<String>;
  textRus?: Maybe<String>;
}

export interface BlogPostCreateInput {
  id?: Maybe<Int>;
  author: UserCreateOneWithoutBlogPostInput;
  comment?: Maybe<CommentCreateManyWithoutBlogPostInput>;
  content: String;
  published: DateTimeInput;
  slug?: Maybe<String>;
  title: String;
}

export interface UserCreateOneWithoutBlogPostInput {
  create?: Maybe<UserCreateWithoutBlogPostInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutBlogPostInput {
  id?: Maybe<Int>;
  comment?: Maybe<CommentCreateManyWithoutAuthorInput>;
  email: String;
  name: String;
  password: String;
  username: String;
}

export interface CommentCreateManyWithoutAuthorInput {
  create?: Maybe<
    CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutAuthorInput {
  id?: Maybe<Int>;
  blogPost: BlogPostCreateOneWithoutCommentInput;
  content: String;
  published: DateTimeInput;
}

export interface BlogPostCreateOneWithoutCommentInput {
  create?: Maybe<BlogPostCreateWithoutCommentInput>;
  connect?: Maybe<BlogPostWhereUniqueInput>;
}

export interface BlogPostCreateWithoutCommentInput {
  id?: Maybe<Int>;
  author: UserCreateOneWithoutBlogPostInput;
  content: String;
  published: DateTimeInput;
  slug?: Maybe<String>;
  title: String;
}

export interface CommentCreateManyWithoutBlogPostInput {
  create?: Maybe<
    CommentCreateWithoutBlogPostInput[] | CommentCreateWithoutBlogPostInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutBlogPostInput {
  id?: Maybe<Int>;
  author: UserCreateOneWithoutCommentInput;
  content: String;
  published: DateTimeInput;
}

export interface UserCreateOneWithoutCommentInput {
  create?: Maybe<UserCreateWithoutCommentInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCommentInput {
  id?: Maybe<Int>;
  blogPost?: Maybe<BlogPostCreateManyWithoutAuthorInput>;
  email: String;
  name: String;
  password: String;
  username: String;
}

export interface BlogPostCreateManyWithoutAuthorInput {
  create?: Maybe<
    BlogPostCreateWithoutAuthorInput[] | BlogPostCreateWithoutAuthorInput
  >;
  connect?: Maybe<BlogPostWhereUniqueInput[] | BlogPostWhereUniqueInput>;
}

export interface BlogPostCreateWithoutAuthorInput {
  id?: Maybe<Int>;
  comment?: Maybe<CommentCreateManyWithoutBlogPostInput>;
  content: String;
  published: DateTimeInput;
  slug?: Maybe<String>;
  title: String;
}

export interface BlogPostUpdateInput {
  author?: Maybe<UserUpdateOneRequiredWithoutBlogPostInput>;
  comment?: Maybe<CommentUpdateManyWithoutBlogPostInput>;
  content?: Maybe<String>;
  published?: Maybe<DateTimeInput>;
  slug?: Maybe<String>;
  title?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutBlogPostInput {
  create?: Maybe<UserCreateWithoutBlogPostInput>;
  update?: Maybe<UserUpdateWithoutBlogPostDataInput>;
  upsert?: Maybe<UserUpsertWithoutBlogPostInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutBlogPostDataInput {
  comment?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  username?: Maybe<String>;
}

export interface CommentUpdateManyWithoutAuthorInput {
  create?: Maybe<
    CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    | CommentUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    | CommentUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutAuthorDataInput;
}

export interface CommentUpdateWithoutAuthorDataInput {
  blogPost?: Maybe<BlogPostUpdateOneRequiredWithoutCommentInput>;
  content?: Maybe<String>;
  published?: Maybe<DateTimeInput>;
}

export interface BlogPostUpdateOneRequiredWithoutCommentInput {
  create?: Maybe<BlogPostCreateWithoutCommentInput>;
  update?: Maybe<BlogPostUpdateWithoutCommentDataInput>;
  upsert?: Maybe<BlogPostUpsertWithoutCommentInput>;
  connect?: Maybe<BlogPostWhereUniqueInput>;
}

export interface BlogPostUpdateWithoutCommentDataInput {
  author?: Maybe<UserUpdateOneRequiredWithoutBlogPostInput>;
  content?: Maybe<String>;
  published?: Maybe<DateTimeInput>;
  slug?: Maybe<String>;
  title?: Maybe<String>;
}

export interface BlogPostUpsertWithoutCommentInput {
  update: BlogPostUpdateWithoutCommentDataInput;
  create: BlogPostCreateWithoutCommentInput;
}

export interface CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutAuthorDataInput;
  create: CommentCreateWithoutAuthorInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  published?: Maybe<DateTimeInput>;
  published_not?: Maybe<DateTimeInput>;
  published_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  published_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  published_lt?: Maybe<DateTimeInput>;
  published_lte?: Maybe<DateTimeInput>;
  published_gt?: Maybe<DateTimeInput>;
  published_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  content?: Maybe<String>;
  published?: Maybe<DateTimeInput>;
}

export interface UserUpsertWithoutBlogPostInput {
  update: UserUpdateWithoutBlogPostDataInput;
  create: UserCreateWithoutBlogPostInput;
}

export interface CommentUpdateManyWithoutBlogPostInput {
  create?: Maybe<
    CommentCreateWithoutBlogPostInput[] | CommentCreateWithoutBlogPostInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutBlogPostInput[]
    | CommentUpdateWithWhereUniqueWithoutBlogPostInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutBlogPostInput[]
    | CommentUpsertWithWhereUniqueWithoutBlogPostInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutBlogPostInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutBlogPostDataInput;
}

export interface CommentUpdateWithoutBlogPostDataInput {
  author?: Maybe<UserUpdateOneRequiredWithoutCommentInput>;
  content?: Maybe<String>;
  published?: Maybe<DateTimeInput>;
}

export interface UserUpdateOneRequiredWithoutCommentInput {
  create?: Maybe<UserCreateWithoutCommentInput>;
  update?: Maybe<UserUpdateWithoutCommentDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCommentDataInput {
  blogPost?: Maybe<BlogPostUpdateManyWithoutAuthorInput>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  username?: Maybe<String>;
}

export interface BlogPostUpdateManyWithoutAuthorInput {
  create?: Maybe<
    BlogPostCreateWithoutAuthorInput[] | BlogPostCreateWithoutAuthorInput
  >;
  delete?: Maybe<BlogPostWhereUniqueInput[] | BlogPostWhereUniqueInput>;
  connect?: Maybe<BlogPostWhereUniqueInput[] | BlogPostWhereUniqueInput>;
  set?: Maybe<BlogPostWhereUniqueInput[] | BlogPostWhereUniqueInput>;
  disconnect?: Maybe<BlogPostWhereUniqueInput[] | BlogPostWhereUniqueInput>;
  update?: Maybe<
    | BlogPostUpdateWithWhereUniqueWithoutAuthorInput[]
    | BlogPostUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | BlogPostUpsertWithWhereUniqueWithoutAuthorInput[]
    | BlogPostUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<BlogPostScalarWhereInput[] | BlogPostScalarWhereInput>;
  updateMany?: Maybe<
    | BlogPostUpdateManyWithWhereNestedInput[]
    | BlogPostUpdateManyWithWhereNestedInput
  >;
}

export interface BlogPostUpdateWithWhereUniqueWithoutAuthorInput {
  where: BlogPostWhereUniqueInput;
  data: BlogPostUpdateWithoutAuthorDataInput;
}

export interface BlogPostUpdateWithoutAuthorDataInput {
  comment?: Maybe<CommentUpdateManyWithoutBlogPostInput>;
  content?: Maybe<String>;
  published?: Maybe<DateTimeInput>;
  slug?: Maybe<String>;
  title?: Maybe<String>;
}

export interface BlogPostUpsertWithWhereUniqueWithoutAuthorInput {
  where: BlogPostWhereUniqueInput;
  update: BlogPostUpdateWithoutAuthorDataInput;
  create: BlogPostCreateWithoutAuthorInput;
}

export interface BlogPostScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  published?: Maybe<DateTimeInput>;
  published_not?: Maybe<DateTimeInput>;
  published_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  published_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  published_lt?: Maybe<DateTimeInput>;
  published_lte?: Maybe<DateTimeInput>;
  published_gt?: Maybe<DateTimeInput>;
  published_gte?: Maybe<DateTimeInput>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  AND?: Maybe<BlogPostScalarWhereInput[] | BlogPostScalarWhereInput>;
  OR?: Maybe<BlogPostScalarWhereInput[] | BlogPostScalarWhereInput>;
  NOT?: Maybe<BlogPostScalarWhereInput[] | BlogPostScalarWhereInput>;
}

export interface BlogPostUpdateManyWithWhereNestedInput {
  where: BlogPostScalarWhereInput;
  data: BlogPostUpdateManyDataInput;
}

export interface BlogPostUpdateManyDataInput {
  content?: Maybe<String>;
  published?: Maybe<DateTimeInput>;
  slug?: Maybe<String>;
  title?: Maybe<String>;
}

export interface UserUpsertWithoutCommentInput {
  update: UserUpdateWithoutCommentDataInput;
  create: UserCreateWithoutCommentInput;
}

export interface CommentUpsertWithWhereUniqueWithoutBlogPostInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutBlogPostDataInput;
  create: CommentCreateWithoutBlogPostInput;
}

export interface BlogPostUpdateManyMutationInput {
  content?: Maybe<String>;
  published?: Maybe<DateTimeInput>;
  slug?: Maybe<String>;
  title?: Maybe<String>;
}

export interface CommentCreateInput {
  id?: Maybe<Int>;
  author: UserCreateOneWithoutCommentInput;
  blogPost: BlogPostCreateOneWithoutCommentInput;
  content: String;
  published: DateTimeInput;
}

export interface CommentUpdateInput {
  author?: Maybe<UserUpdateOneRequiredWithoutCommentInput>;
  blogPost?: Maybe<BlogPostUpdateOneRequiredWithoutCommentInput>;
  content?: Maybe<String>;
  published?: Maybe<DateTimeInput>;
}

export interface CommentUpdateManyMutationInput {
  content?: Maybe<String>;
  published?: Maybe<DateTimeInput>;
}

export interface HomepageSliderCreateInput {
  id?: Maybe<UUID>;
  filepath: String;
  position?: Maybe<Int>;
}

export interface HomepageSliderUpdateInput {
  filepath?: Maybe<String>;
  position?: Maybe<Int>;
}

export interface HomepageSliderUpdateManyMutationInput {
  filepath?: Maybe<String>;
  position?: Maybe<Int>;
}

export interface PartnerSliderCreateInput {
  id?: Maybe<UUID>;
  filepath: String;
  url?: Maybe<String>;
}

export interface PartnerSliderUpdateInput {
  filepath?: Maybe<String>;
  url?: Maybe<String>;
}

export interface PartnerSliderUpdateManyMutationInput {
  filepath?: Maybe<String>;
  url?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<Int>;
  blogPost?: Maybe<BlogPostCreateManyWithoutAuthorInput>;
  comment?: Maybe<CommentCreateManyWithoutAuthorInput>;
  email: String;
  name: String;
  password: String;
  username: String;
}

export interface UserUpdateInput {
  blogPost?: Maybe<BlogPostUpdateManyWithoutAuthorInput>;
  comment?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  username?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  username?: Maybe<String>;
}

export interface AboutSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AboutWhereInput>;
  AND?: Maybe<AboutSubscriptionWhereInput[] | AboutSubscriptionWhereInput>;
  OR?: Maybe<AboutSubscriptionWhereInput[] | AboutSubscriptionWhereInput>;
  NOT?: Maybe<AboutSubscriptionWhereInput[] | AboutSubscriptionWhereInput>;
}

export interface BlogPostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BlogPostWhereInput>;
  AND?: Maybe<
    BlogPostSubscriptionWhereInput[] | BlogPostSubscriptionWhereInput
  >;
  OR?: Maybe<BlogPostSubscriptionWhereInput[] | BlogPostSubscriptionWhereInput>;
  NOT?: Maybe<
    BlogPostSubscriptionWhereInput[] | BlogPostSubscriptionWhereInput
  >;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface HomepageSliderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HomepageSliderWhereInput>;
  AND?: Maybe<
    | HomepageSliderSubscriptionWhereInput[]
    | HomepageSliderSubscriptionWhereInput
  >;
  OR?: Maybe<
    | HomepageSliderSubscriptionWhereInput[]
    | HomepageSliderSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | HomepageSliderSubscriptionWhereInput[]
    | HomepageSliderSubscriptionWhereInput
  >;
}

export interface PartnerSliderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PartnerSliderWhereInput>;
  AND?: Maybe<
    PartnerSliderSubscriptionWhereInput[] | PartnerSliderSubscriptionWhereInput
  >;
  OR?: Maybe<
    PartnerSliderSubscriptionWhereInput[] | PartnerSliderSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PartnerSliderSubscriptionWhereInput[] | PartnerSliderSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface About {
  id: UUID;
  status?: String;
  textArm: String;
  textEng: String;
  textRus: String;
}

export interface AboutPromise extends Promise<About>, Fragmentable {
  id: () => Promise<UUID>;
  status: () => Promise<String>;
  textArm: () => Promise<String>;
  textEng: () => Promise<String>;
  textRus: () => Promise<String>;
}

export interface AboutSubscription
  extends Promise<AsyncIterator<About>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  status: () => Promise<AsyncIterator<String>>;
  textArm: () => Promise<AsyncIterator<String>>;
  textEng: () => Promise<AsyncIterator<String>>;
  textRus: () => Promise<AsyncIterator<String>>;
}

export interface AboutNullablePromise
  extends Promise<About | null>,
    Fragmentable {
  id: () => Promise<UUID>;
  status: () => Promise<String>;
  textArm: () => Promise<String>;
  textEng: () => Promise<String>;
  textRus: () => Promise<String>;
}

export interface AboutConnection {
  pageInfo: PageInfo;
  edges: AboutEdge[];
}

export interface AboutConnectionPromise
  extends Promise<AboutConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AboutEdge>>() => T;
  aggregate: <T = AggregateAboutPromise>() => T;
}

export interface AboutConnectionSubscription
  extends Promise<AsyncIterator<AboutConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AboutEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAboutSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AboutEdge {
  node: About;
  cursor: String;
}

export interface AboutEdgePromise extends Promise<AboutEdge>, Fragmentable {
  node: <T = AboutPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AboutEdgeSubscription
  extends Promise<AsyncIterator<AboutEdge>>,
    Fragmentable {
  node: <T = AboutSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAbout {
  count: Int;
}

export interface AggregateAboutPromise
  extends Promise<AggregateAbout>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAboutSubscription
  extends Promise<AsyncIterator<AggregateAbout>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BlogPost {
  id: Int;
  content: String;
  published: DateTimeOutput;
  slug?: String;
  title: String;
}

export interface BlogPostPromise extends Promise<BlogPost>, Fragmentable {
  id: () => Promise<Int>;
  author: <T = UserPromise>() => T;
  comment: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  content: () => Promise<String>;
  published: () => Promise<DateTimeOutput>;
  slug: () => Promise<String>;
  title: () => Promise<String>;
}

export interface BlogPostSubscription
  extends Promise<AsyncIterator<BlogPost>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  author: <T = UserSubscription>() => T;
  comment: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  content: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<DateTimeOutput>>;
  slug: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface BlogPostNullablePromise
  extends Promise<BlogPost | null>,
    Fragmentable {
  id: () => Promise<Int>;
  author: <T = UserPromise>() => T;
  comment: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  content: () => Promise<String>;
  published: () => Promise<DateTimeOutput>;
  slug: () => Promise<String>;
  title: () => Promise<String>;
}

export interface User {
  id: Int;
  email: String;
  name: String;
  password: String;
  username: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<Int>;
  blogPost: <T = FragmentableArray<BlogPost>>(args?: {
    where?: BlogPostWhereInput;
    orderBy?: BlogPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comment: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  username: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  blogPost: <T = Promise<AsyncIterator<BlogPostSubscription>>>(args?: {
    where?: BlogPostWhereInput;
    orderBy?: BlogPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comment: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<Int>;
  blogPost: <T = FragmentableArray<BlogPost>>(args?: {
    where?: BlogPostWhereInput;
    orderBy?: BlogPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comment: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  username: () => Promise<String>;
}

export interface Comment {
  id: Int;
  content: String;
  published: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<Int>;
  author: <T = UserPromise>() => T;
  blogPost: <T = BlogPostPromise>() => T;
  content: () => Promise<String>;
  published: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  author: <T = UserSubscription>() => T;
  blogPost: <T = BlogPostSubscription>() => T;
  content: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<Int>;
  author: <T = UserPromise>() => T;
  blogPost: <T = BlogPostPromise>() => T;
  content: () => Promise<String>;
  published: () => Promise<DateTimeOutput>;
}

export interface BlogPostConnection {
  pageInfo: PageInfo;
  edges: BlogPostEdge[];
}

export interface BlogPostConnectionPromise
  extends Promise<BlogPostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BlogPostEdge>>() => T;
  aggregate: <T = AggregateBlogPostPromise>() => T;
}

export interface BlogPostConnectionSubscription
  extends Promise<AsyncIterator<BlogPostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BlogPostEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBlogPostSubscription>() => T;
}

export interface BlogPostEdge {
  node: BlogPost;
  cursor: String;
}

export interface BlogPostEdgePromise
  extends Promise<BlogPostEdge>,
    Fragmentable {
  node: <T = BlogPostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BlogPostEdgeSubscription
  extends Promise<AsyncIterator<BlogPostEdge>>,
    Fragmentable {
  node: <T = BlogPostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBlogPost {
  count: Int;
}

export interface AggregateBlogPostPromise
  extends Promise<AggregateBlogPost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBlogPostSubscription
  extends Promise<AsyncIterator<AggregateBlogPost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface HomepageSlider {
  id: UUID;
  filepath: String;
  position?: Int;
}

export interface HomepageSliderPromise
  extends Promise<HomepageSlider>,
    Fragmentable {
  id: () => Promise<UUID>;
  filepath: () => Promise<String>;
  position: () => Promise<Int>;
}

export interface HomepageSliderSubscription
  extends Promise<AsyncIterator<HomepageSlider>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  filepath: () => Promise<AsyncIterator<String>>;
  position: () => Promise<AsyncIterator<Int>>;
}

export interface HomepageSliderNullablePromise
  extends Promise<HomepageSlider | null>,
    Fragmentable {
  id: () => Promise<UUID>;
  filepath: () => Promise<String>;
  position: () => Promise<Int>;
}

export interface HomepageSliderConnection {
  pageInfo: PageInfo;
  edges: HomepageSliderEdge[];
}

export interface HomepageSliderConnectionPromise
  extends Promise<HomepageSliderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HomepageSliderEdge>>() => T;
  aggregate: <T = AggregateHomepageSliderPromise>() => T;
}

export interface HomepageSliderConnectionSubscription
  extends Promise<AsyncIterator<HomepageSliderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HomepageSliderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHomepageSliderSubscription>() => T;
}

export interface HomepageSliderEdge {
  node: HomepageSlider;
  cursor: String;
}

export interface HomepageSliderEdgePromise
  extends Promise<HomepageSliderEdge>,
    Fragmentable {
  node: <T = HomepageSliderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HomepageSliderEdgeSubscription
  extends Promise<AsyncIterator<HomepageSliderEdge>>,
    Fragmentable {
  node: <T = HomepageSliderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHomepageSlider {
  count: Int;
}

export interface AggregateHomepageSliderPromise
  extends Promise<AggregateHomepageSlider>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHomepageSliderSubscription
  extends Promise<AsyncIterator<AggregateHomepageSlider>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PartnerSlider {
  id: UUID;
  filepath: String;
  url?: String;
}

export interface PartnerSliderPromise
  extends Promise<PartnerSlider>,
    Fragmentable {
  id: () => Promise<UUID>;
  filepath: () => Promise<String>;
  url: () => Promise<String>;
}

export interface PartnerSliderSubscription
  extends Promise<AsyncIterator<PartnerSlider>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  filepath: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface PartnerSliderNullablePromise
  extends Promise<PartnerSlider | null>,
    Fragmentable {
  id: () => Promise<UUID>;
  filepath: () => Promise<String>;
  url: () => Promise<String>;
}

export interface PartnerSliderConnection {
  pageInfo: PageInfo;
  edges: PartnerSliderEdge[];
}

export interface PartnerSliderConnectionPromise
  extends Promise<PartnerSliderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PartnerSliderEdge>>() => T;
  aggregate: <T = AggregatePartnerSliderPromise>() => T;
}

export interface PartnerSliderConnectionSubscription
  extends Promise<AsyncIterator<PartnerSliderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PartnerSliderEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePartnerSliderSubscription>() => T;
}

export interface PartnerSliderEdge {
  node: PartnerSlider;
  cursor: String;
}

export interface PartnerSliderEdgePromise
  extends Promise<PartnerSliderEdge>,
    Fragmentable {
  node: <T = PartnerSliderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PartnerSliderEdgeSubscription
  extends Promise<AsyncIterator<PartnerSliderEdge>>,
    Fragmentable {
  node: <T = PartnerSliderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePartnerSlider {
  count: Int;
}

export interface AggregatePartnerSliderPromise
  extends Promise<AggregatePartnerSlider>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePartnerSliderSubscription
  extends Promise<AsyncIterator<AggregatePartnerSlider>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AboutSubscriptionPayload {
  mutation: MutationType;
  node: About;
  updatedFields: String[];
  previousValues: AboutPreviousValues;
}

export interface AboutSubscriptionPayloadPromise
  extends Promise<AboutSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AboutPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AboutPreviousValuesPromise>() => T;
}

export interface AboutSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AboutSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AboutSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AboutPreviousValuesSubscription>() => T;
}

export interface AboutPreviousValues {
  id: UUID;
  status?: String;
  textArm: String;
  textEng: String;
  textRus: String;
}

export interface AboutPreviousValuesPromise
  extends Promise<AboutPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  status: () => Promise<String>;
  textArm: () => Promise<String>;
  textEng: () => Promise<String>;
  textRus: () => Promise<String>;
}

export interface AboutPreviousValuesSubscription
  extends Promise<AsyncIterator<AboutPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  status: () => Promise<AsyncIterator<String>>;
  textArm: () => Promise<AsyncIterator<String>>;
  textEng: () => Promise<AsyncIterator<String>>;
  textRus: () => Promise<AsyncIterator<String>>;
}

export interface BlogPostSubscriptionPayload {
  mutation: MutationType;
  node: BlogPost;
  updatedFields: String[];
  previousValues: BlogPostPreviousValues;
}

export interface BlogPostSubscriptionPayloadPromise
  extends Promise<BlogPostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BlogPostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BlogPostPreviousValuesPromise>() => T;
}

export interface BlogPostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BlogPostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BlogPostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BlogPostPreviousValuesSubscription>() => T;
}

export interface BlogPostPreviousValues {
  id: Int;
  content: String;
  published: DateTimeOutput;
  slug?: String;
  title: String;
}

export interface BlogPostPreviousValuesPromise
  extends Promise<BlogPostPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  content: () => Promise<String>;
  published: () => Promise<DateTimeOutput>;
  slug: () => Promise<String>;
  title: () => Promise<String>;
}

export interface BlogPostPreviousValuesSubscription
  extends Promise<AsyncIterator<BlogPostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<DateTimeOutput>>;
  slug: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: Int;
  content: String;
  published: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  content: () => Promise<String>;
  published: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface HomepageSliderSubscriptionPayload {
  mutation: MutationType;
  node: HomepageSlider;
  updatedFields: String[];
  previousValues: HomepageSliderPreviousValues;
}

export interface HomepageSliderSubscriptionPayloadPromise
  extends Promise<HomepageSliderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HomepageSliderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HomepageSliderPreviousValuesPromise>() => T;
}

export interface HomepageSliderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HomepageSliderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HomepageSliderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HomepageSliderPreviousValuesSubscription>() => T;
}

export interface HomepageSliderPreviousValues {
  id: UUID;
  filepath: String;
  position?: Int;
}

export interface HomepageSliderPreviousValuesPromise
  extends Promise<HomepageSliderPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  filepath: () => Promise<String>;
  position: () => Promise<Int>;
}

export interface HomepageSliderPreviousValuesSubscription
  extends Promise<AsyncIterator<HomepageSliderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  filepath: () => Promise<AsyncIterator<String>>;
  position: () => Promise<AsyncIterator<Int>>;
}

export interface PartnerSliderSubscriptionPayload {
  mutation: MutationType;
  node: PartnerSlider;
  updatedFields: String[];
  previousValues: PartnerSliderPreviousValues;
}

export interface PartnerSliderSubscriptionPayloadPromise
  extends Promise<PartnerSliderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PartnerSliderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PartnerSliderPreviousValuesPromise>() => T;
}

export interface PartnerSliderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PartnerSliderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PartnerSliderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PartnerSliderPreviousValuesSubscription>() => T;
}

export interface PartnerSliderPreviousValues {
  id: UUID;
  filepath: String;
  url?: String;
}

export interface PartnerSliderPreviousValuesPromise
  extends Promise<PartnerSliderPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  filepath: () => Promise<String>;
  url: () => Promise<String>;
}

export interface PartnerSliderPreviousValuesSubscription
  extends Promise<AsyncIterator<PartnerSliderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  filepath: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: Int;
  email: String;
  name: String;
  password: String;
  username: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  username: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
}

export type UUID = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "About",
    embedded: false
  },
  {
    name: "BlogPost",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "HomepageSlider",
    embedded: false
  },
  {
    name: "PartnerSlider",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
